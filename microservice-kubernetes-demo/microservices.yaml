apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: apache
  name: apache
spec:
  replicas: 1
  selector:
    matchLabels:
      run: apache
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: apache
    spec:
      serviceAccountName: opentelemetry-collector
      containers:
      - image: docker.io/ewolff/microservice-kubernetes-demo-apache:latest
        name: apache
        ports:
        - containerPort: 80
        resources: {}
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: catalog
  name: catalog
spec:
  replicas: 1
  selector:
    matchLabels:
      run: catalog
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: catalog
    spec:
      serviceAccountName: opentelemetry-collector
      containers:
      - image: docker.io/satwikareddy007/microservice-kubernetes-demo-catalog:latest
        name: catalog
        env:
        - name: JAVA_TOOL_OPTIONS
          value: -javaagent:/opt/opentelemetry-javaagent-all.jar '-Dlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg traceID=%X{trace_id} %n' -Dotel.resource.attributes=service.name=catalog
        # This is picked up by the opentelemetry sdks
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector.default.svc.cluster.local:55680"
        ports:
        - containerPort: 8080
        resources: {}
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: customer
  name: customer
spec:
  replicas: 1
  selector:
    matchLabels:
      run: customer
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: customer
    spec:
      serviceAccountName: opentelemetry-collector
      containers:
      - image: docker.io/satwikareddy007/microservice-kubernetes-demo-customer:latest
        name: customer
        env:
        - name: JAVA_TOOL_OPTIONS
          value: -javaagent:/opt/opentelemetry-javaagent-all.jar '-Dlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg traceID=%X{trace_id} %n' -Dotel.resource.attributes=service.name=customer
        # This is picked up by the opentelemetry sdks
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector.default.svc.cluster.local:55680"
        ports:
        - containerPort: 8080
        resources: {}
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: order
  name: order
spec:
  replicas: 1
  selector:
    matchLabels:
      run: order
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: order
    spec:
      serviceAccountName: opentelemetry-collector
      containers:
      - image: docker.io/satwikareddy007/microservice-kubernetes-demo-order:latest
        name: order
        env:
        - name: JAVA_TOOL_OPTIONS
          value: -javaagent:/opt/opentelemetry-javaagent-all.jar '-Dlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg traceID=%X{trace_id} %n' -Dotel.resource.attributes=service.name=order
        # This is picked up by the opentelemetry sdks
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector.default.svc.cluster.local:55680"
        ports:
        - containerPort: 8080
        resources: {}
status: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: apache
  name: apache
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    run: apache
  type: LoadBalancer
status:
  loadBalancer: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: catalog
  name: catalog
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    run: catalog
  type: LoadBalancer
status:
  loadBalancer: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: customer
  name: customer
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    run: customer
  type: LoadBalancer
status:
  loadBalancer: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: order
  name: order
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    run: order
  type: LoadBalancer
status:
  loadBalancer: {}
